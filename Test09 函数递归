//函数递归
//自己调用自己 将一个大型复杂的问题 层层转化为一个与原问题相似的规模较小的问题来求解
//思考方式：把大事化小
//在扫雷中运用递归？
//例如
//int main()
//{
//	printf("hehe\n");
//	main();
//	return 0;
//}
//史上最简单的递归 死递归 会陷入死循环


//练习一：接受一个整型值 按顺序打印它的每一位 例如：输入：1234 输出1 2 3 4

void print(unsigned int n)
{
	if(n>9)//此处给了个条件 在n<=9时可以跳出递归 不陷入死循环
	{
		print(n/10);//分解为 print（123） 和打印“4” 以此类推 分解为print(12)和打印“3” 打印“4”
	}
	printf("%d ",n%10);//这个是最后才输出的
}

int main()
{
	unsigned int num = 0;
	scanf("%u",&num);//%u 无符号整型
	print(num);//可以打印参数部分数字的每一位

	return 0;

}
//从此示例可以得出递归的两个必要条件：
//1.存在限制条件 当满足这个条件的时候递归就不再继续
//2.每次递归调用之后越来越接近这个限制条件


void test(int n)
{
	if(n<1000)
	{
		test(n+1);
	}
}
int main ()
{
	test(1);
	return 0;
}
//这个代码会栈溢出
//内存中有 栈区 堆区 静态区
//局部变量放在栈区中 函数的形参也防在栈区（即栈区中放的时一些临时的变量）
//堆区 动态内存分配的 malloc/free calloc realloc
//静态区 全局变量 静态变量
//内存的栈区 中会有一个main函数的栈帧空间（放main函数内的变量） test函数运行 栈给test分配空间 运行一次还没结束 继续为test分配空间
//上面的栈区会逐渐被耗干即栈溢出

//由此得出 写递归代码的时候 
//1.不能死递归 都有跳出条件 每次递归逼近跳出条件
//2.递归层次不能太深 否则也有可能栈溢出

//www.stackoverflow.com
//这个网站相当于程序员的知乎！



//练习二
//编写函数 不允许创建临时变量 求字符串长度
#include<string.h>

int my_strlen(char* str)//此处arr传给my_strlen的是指针的地址
{
	int count=0;//此时创建了一个count临时变量 但是题目要求不允许创建临时变量
	while(*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}


int main()
{
	char arr[]="bit";
	//['b']['i']['t']['\0']
	//模拟实现一个strlen函数
	printf("%d\n",my_strlen(arr));//此处原来是用strlen（arr）

	return 0;
}

//于是改为：
int my_strlen(char* str)
{
	//利用递归 将题目变成1+1+1+my_strlen('\0')
	if(*str != '\0')
		return 1+my_strlen(str+1);
	else
		return 0;
}

int main()
{
	char arr[]="bit";
	//['b']['i']['t']['\0']
	//模拟实现一个strlen函数
	printf("%d\n",my_strlen(arr));//此处原来是用strlen（arr）

	return 0;
}
