//函数递归
//自己调用自己 将一个大型复杂的问题 层层转化为一个与原问题相似的规模较小的问题来求解
//思考方式：把大事化小
//例如
//int main()
//{
//	printf("hehe\n");
//	main();
//	return 0;
//}
//史上最简单的递归 死递归 会陷入死循环


//练习一：接受一个整型值 按顺序打印它的每一位 例如：输入：1234 输出1 2 3 4

void print(unsigned int n)
{
	if(n>9)//此处给了个条件 在n<=9时可以跳出递归 不陷入死循环
	{
		print(n/10);//分解为 print（123） 和打印4 以此类推
	}
	printf("%d ",n%10);//这个是最后才输出的
}

int main()
{
	unsigned int num = 0;
	scanf("%u",&num);//%u 无符号整型
	print(num);//可以打印参数部分数字的每一位

	return 0;

}
//从此示例可以得出递归的两个必要条件：
//1.存在限制条件 当满足这个条件的时候递归就不再继续
//2.每次递归调用之后越来越接近这个限制条件
