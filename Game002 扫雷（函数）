//1.布置雷
//2.排查雷
//存放雷的棋盘
//雷 不是雷 排查出的信息如果全放在一个数组内会影响打印 且容易造成歧义
//所以创建两个数组 一个数组存储布置好的雷与非雷的信息 另外一个存放排查出的雷的信息
//两个数组都是char型的数组
//如果保持原本的9*9的数组分布在排查最边上的数组的雷的信息时会有部分数组不在此9*9的范围内 造成越界 
//所以在周围多设置一排数组 以至于不会越界
//创建11*11的棋盘
//按照game.c game.h test.c 的分布来设计游戏

//此处应用自定义头文件
#include"game.h"


//首先在test.c中设置menu函数作为菜单
void menu()
{
	printf("\n");
	printf("*****************************************\n");
	printf("**************    1.play    *************\n");
	printf("**************    0.exit    *************\n");
	printf("*****************************************\n");
	printf("\n");
}


//游戏函数void game ：
//1.定义并初始化函数：
	char mine[ROWS][COLS] = {0};//存放布置好的雷的信息 初始化全为0
	char show[ROWS][COLS] = {0};//存放排查出的雷的信息 初始化全为*
	//初始化棋盘
	InitBoard(mine,ROWS,COLS,'0');
	InitBoard(show,ROWS,COLS,'*');
  
//2.打印棋盘： 
  DisPlayBoard(mine,ROW,COL);//此处是调试棋盘 在调试完成之后需要将其屏蔽
	DisPlayBoard(show,ROW,COL);
  
//3.布置雷：
  SetMine(mine,ROW,COL);
	/*DisPlayBoard(mine,ROW,COL);*///此处是调试棋盘 在调试完成之后需要将其屏蔽
  
//4.排查雷：
	FindMine(mine,show,ROW,COL);//排查出雷放在show数组中
  

//主函数：
int main()
{
	int input=0;//在函数开头定义input 下文要使用scanf函数得到玩家输入的值
	srand((unsigned int)time(NULL));//这里引用srand函数 因为在game.c中使用了rand函数
  //用rand函数之前要调用sran函数 此处必不可少 此处强制转换了类型为int型 为了不报警告
  
	do  //do while函数确保在开始运行菜单函数 跳出switch循环 可以再次选择开始游戏
	{
		menu();
		printf("请选择:>");
		scanf("%d",&input);
		switch(input)
		{
		case 1:
			game();
			//printf("\n");
			//printf("扫雷\n");
			break;
		case 0:
			printf("\n");
			printf("退出游戏\n");
			break;
		default:
			printf("\n");
			printf("选择错误，重新选择\n");
			break;
		}
	}
	while(input);
	return 0;
}
  
  
  
