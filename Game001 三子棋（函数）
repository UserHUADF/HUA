//三子棋：包含
//test.c  测试游戏的逻辑
//game.h 关于游戏相关的函数声明，符号声明头文件的包含
//game.c 游戏相关函数的实现



//以下为详细的函数构成
棋盘初始化：
void DisplayBoard(char board[ROW][COL],int row,int col)
{
	int i=0;
	for(i=0;i<row;i++)
	{
		printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
		if(i<row-1)
		printf("---|---|---\n");
	}

}
//此种方式在更改棋盘布局时不方便无法打印大于3*3的棋盘格局 所以此处我们使用函数嵌套的方式打印棋盘
//如下：
	int i=0;
	for(i=0;i<row;i++)
	{
		int j=0;
		for(j = 0;j < col;j++)
		{
			printf(" %c ",board[i][j]);
			if(j<col-1)
			printf("|");
		}
		printf("\n");
		//printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
		if(i<row-1)
		//printf("---|---|---\n");
		{
			int j=0;
			for(j=0;j<col;j++)
			{
				printf("---");
				if(j<col-1)
					printf("|");

			}
      	printf("\n");
		}
	}
  //用这种方式可以打印N子棋的棋盘
  
  
  //玩家下棋
  void PlayerMove(char board[][COL],int row,int col)
{
	int x=0;
	int y=0;
	printf("玩家走:>\n");

	while(1)
	{
		printf("请输入下棋的坐标:>");
		scanf("%d %d",&x,&y);
		//判断坐标合法性
		if(x>=1 && x<=row && y>=1 && y<=col)
		{
			//下棋
			//判断坐标是否被占用
			if(board[x-1][y-1] == ' ')
			{
				board[x-1][y-1] = '*';
				break;
			}
			else
			{
				printf("坐标被占用，请重新输入\n");
			}
		}
		else
		{
			printf("坐标非法，请重新输入\n");
		}

	}
}
  
  
  //电脑下棋：
  void ComputerMove(char board[][COL],int row,int col)
{
	printf("电脑走:>\n");

	while(1)
	{
		int x = rand()%row;
		int y = rand()%col;
		//判断占用
		if(board[x][y] == ' ')
		{
			board[x][y]='#';
			break;
		}
	}
}
  
 在游戏进行的过程中
 1.玩家赢了-*
 2.电脑赢了-#
 3.平局    -Q
 4.游戏继续-C
 
 利用IsWin函数来判断游戏状态(返回char字型)
 //判断游戏是否有输赢（3*3棋盘）
char IsWin(char board[][COL],int row,int col)
{
	char dec=0;
	int i=0;
	//判断三行
	for(i = 0;i<row;i++)
	{
		if( board[i][0]==board[i][1] && board[i][1]==board[i][2]&&board[i][1]!=' ')
		{
			return board[i][1];//此处返回的就是赢家‘*’或者‘#’
		}
	}
	//判断三列
	for(i=0;i<col;i++)
	{
		if(board[0][i]==board[1][i]&&board[1][i]==board[2][i]&&board[1][i]!=' ')
		{
			return board[1][i];//此处返回的就是赢家‘*’或者‘#’
		}
	}
	//判断对角线（两个对角线）
	if(board[0][0]==board[1][1]&&board[1][1]==board[2][2]&&board[1][1]!=' ')
	{
		return board[1][1];	
	}
	if(board[0][2]==board[1][1]&&board[1][1]==board[2][0]&&board[1][1]!=' ')
	{
		return board[1][1];	
	}

	//判断平局

	
	dec=IsFull(board,row,col);
	if(dec == 1)
	{
		return 'Q';
	}
	//继续
	return 'C';
}


//判断棋盘满了与否使用的IsFull函数如下（放在IsWin函数之前）
int IsFull(char board[ROW][COL],int row,int col)
{
	int i=0;
	int j=0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			if(board[i][j]==' ')
			{
				return 0;//棋盘没满
				
			}
		}	
	}
	return 1;//棋盘满了
}

 
